/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.generated;


import org.example.jooq.generated.tables.Author;
import org.example.jooq.generated.tables.Book;
import org.example.jooq.generated.tables.Library;
import org.example.jooq.generated.tables.LibraryBook;
import org.example.jooq.generated.tables.LibraryInfo;
import org.example.jooq.generated.tables.records.AuthorRecord;
import org.example.jooq.generated.tables.records.BookRecord;
import org.example.jooq.generated.tables.records.LibraryBookRecord;
import org.example.jooq.generated.tables.records.LibraryInfoRecord;
import org.example.jooq.generated.tables.records.LibraryRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * example.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("KEY_author_PRIMARY"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = Internal.createUniqueKey(Book.BOOK, DSL.name("KEY_book_PRIMARY"), new TableField[] { Book.BOOK.ID }, true);
    public static final UniqueKey<LibraryRecord> KEY_LIBRARY_PRIMARY = Internal.createUniqueKey(Library.LIBRARY, DSL.name("KEY_library_PRIMARY"), new TableField[] { Library.LIBRARY.ID }, true);
    public static final UniqueKey<LibraryBookRecord> KEY_LIBRARY_BOOK_PRIMARY = Internal.createUniqueKey(LibraryBook.LIBRARY_BOOK, DSL.name("KEY_library_book_PRIMARY"), new TableField[] { LibraryBook.LIBRARY_BOOK.LIBRARY_ID, LibraryBook.LIBRARY_BOOK.BOOK_ID }, true);
    public static final UniqueKey<LibraryInfoRecord> KEY_LIBRARY_INFO_PRIMARY = Internal.createUniqueKey(LibraryInfo.LIBRARY_INFO, DSL.name("KEY_library_info_PRIMARY"), new TableField[] { LibraryInfo.LIBRARY_INFO.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookRecord, AuthorRecord> BOOK_IBFK_1 = Internal.createForeignKey(Book.BOOK, DSL.name("book_ibfk_1"), new TableField[] { Book.BOOK.AUTHOR_ID }, Keys.KEY_AUTHOR_PRIMARY, new TableField[] { Author.AUTHOR.ID }, true);
    public static final ForeignKey<LibraryBookRecord, BookRecord> FK_LIBRARY_BOOK_BOOK = Internal.createForeignKey(LibraryBook.LIBRARY_BOOK, DSL.name("fk_library_book_book"), new TableField[] { LibraryBook.LIBRARY_BOOK.BOOK_ID }, Keys.KEY_BOOK_PRIMARY, new TableField[] { Book.BOOK.ID }, true);
    public static final ForeignKey<LibraryBookRecord, LibraryRecord> FK_LIBRARY_BOOK_LIBRARY = Internal.createForeignKey(LibraryBook.LIBRARY_BOOK, DSL.name("fk_library_book_library"), new TableField[] { LibraryBook.LIBRARY_BOOK.LIBRARY_ID }, Keys.KEY_LIBRARY_PRIMARY, new TableField[] { Library.LIBRARY.ID }, true);
    public static final ForeignKey<LibraryInfoRecord, LibraryRecord> FK_LIBRARY = Internal.createForeignKey(LibraryInfo.LIBRARY_INFO, DSL.name("fk_library"), new TableField[] { LibraryInfo.LIBRARY_INFO.ID }, Keys.KEY_LIBRARY_PRIMARY, new TableField[] { Library.LIBRARY.ID }, true);
}
