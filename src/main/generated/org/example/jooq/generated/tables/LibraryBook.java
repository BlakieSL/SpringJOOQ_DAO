/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.example.jooq.generated.Example;
import org.example.jooq.generated.Keys;
import org.example.jooq.generated.tables.Book.BookPath;
import org.example.jooq.generated.tables.Library.LibraryPath;
import org.example.jooq.generated.tables.records.LibraryBookRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LibraryBook extends TableImpl<LibraryBookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>example.library_book</code>
     */
    public static final LibraryBook LIBRARY_BOOK = new LibraryBook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LibraryBookRecord> getRecordType() {
        return LibraryBookRecord.class;
    }

    /**
     * The column <code>example.library_book.library_id</code>.
     */
    public final TableField<LibraryBookRecord, Long> LIBRARY_ID = createField(DSL.name("library_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>example.library_book.book_id</code>.
     */
    public final TableField<LibraryBookRecord, Long> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private LibraryBook(Name alias, Table<LibraryBookRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LibraryBook(Name alias, Table<LibraryBookRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>example.library_book</code> table reference
     */
    public LibraryBook(String alias) {
        this(DSL.name(alias), LIBRARY_BOOK);
    }

    /**
     * Create an aliased <code>example.library_book</code> table reference
     */
    public LibraryBook(Name alias) {
        this(alias, LIBRARY_BOOK);
    }

    /**
     * Create a <code>example.library_book</code> table reference
     */
    public LibraryBook() {
        this(DSL.name("library_book"), null);
    }

    public <O extends Record> LibraryBook(Table<O> path, ForeignKey<O, LibraryBookRecord> childPath, InverseForeignKey<O, LibraryBookRecord> parentPath) {
        super(path, childPath, parentPath, LIBRARY_BOOK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LibraryBookPath extends LibraryBook implements Path<LibraryBookRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LibraryBookPath(Table<O> path, ForeignKey<O, LibraryBookRecord> childPath, InverseForeignKey<O, LibraryBookRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LibraryBookPath(Name alias, Table<LibraryBookRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LibraryBookPath as(String alias) {
            return new LibraryBookPath(DSL.name(alias), this);
        }

        @Override
        public LibraryBookPath as(Name alias) {
            return new LibraryBookPath(alias, this);
        }

        @Override
        public LibraryBookPath as(Table<?> alias) {
            return new LibraryBookPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Example.EXAMPLE;
    }

    @Override
    public UniqueKey<LibraryBookRecord> getPrimaryKey() {
        return Keys.KEY_LIBRARY_BOOK_PRIMARY;
    }

    @Override
    public List<ForeignKey<LibraryBookRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_LIBRARY_BOOK_BOOK, Keys.FK_LIBRARY_BOOK_LIBRARY);
    }

    private transient BookPath _book;

    /**
     * Get the implicit join path to the <code>example.book</code> table.
     */
    public BookPath book() {
        if (_book == null)
            _book = new BookPath(this, Keys.FK_LIBRARY_BOOK_BOOK, null);

        return _book;
    }

    private transient LibraryPath _library;

    /**
     * Get the implicit join path to the <code>example.library</code> table.
     */
    public LibraryPath library() {
        if (_library == null)
            _library = new LibraryPath(this, Keys.FK_LIBRARY_BOOK_LIBRARY, null);

        return _library;
    }

    @Override
    public LibraryBook as(String alias) {
        return new LibraryBook(DSL.name(alias), this);
    }

    @Override
    public LibraryBook as(Name alias) {
        return new LibraryBook(alias, this);
    }

    @Override
    public LibraryBook as(Table<?> alias) {
        return new LibraryBook(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LibraryBook rename(String name) {
        return new LibraryBook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LibraryBook rename(Name name) {
        return new LibraryBook(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LibraryBook rename(Table<?> name) {
        return new LibraryBook(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LibraryBook where(Condition condition) {
        return new LibraryBook(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LibraryBook where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LibraryBook where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LibraryBook where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LibraryBook where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LibraryBook where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LibraryBook where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LibraryBook where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LibraryBook whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LibraryBook whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
